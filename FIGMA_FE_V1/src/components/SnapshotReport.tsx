import React, { useState } from 'react';
import { Download, FileText, Loader2 } from 'lucide-react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';

interface School {
  name: string;
  location: string;
  metrics: Record<string, any>;
}

interface SnapshotReportProps {
  schools: School[];
  selectedMetric: string;
}

export function SnapshotReport({ schools, selectedMetric }: SnapshotReportProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generateSummary = (school: School): string => {
    const currentMetrics = school.metrics['2025'] || {};
    const pastMetrics = school.metrics['2019'] || {};
    
    const rank = currentMetrics.national_rank;
    const score = currentMetrics.overall_score;
    const gradRate = currentMetrics.graduation_rate_pct;
    const enrollment = currentMetrics.enrollment;
    
    // Calculate trend for selected metric
    const currentValue = currentMetrics[selectedMetric];
    const pastValue = pastMetrics[selectedMetric];
    const trend = currentValue && pastValue ? 
      ((currentValue - pastValue) / pastValue * 100).toFixed(1) : null;
    
    let summary = `${school.name} maintains its position as a top-performing high school, currently ranked #${rank} nationally with an overall score of ${score}. `;
    
    if (enrollment) {
      summary += `The school serves ${enrollment.toLocaleString()} students with a graduation rate of ${gradRate}%. `;
    }
    
    if (trend !== null) {
      const metricLabel = getMetricLabel(selectedMetric);
      const trendDirection = parseFloat(trend) > 0 ? 'improved' : 'declined';
      summary += `Over the past 6 years, ${metricLabel.toLowerCase()} has ${trendDirection} by ${Math.abs(parseFloat(trend))}%.`;
    }
    
    return summary;
  };

  const getMetricLabel = (metric: string): string => {
    const labels: Record<string, string> = {
      'overall_score': 'Overall Score',
      'graduation_rate_pct': 'Graduation Rate',
      'ap_pass_pct': 'AP Pass Rate',
      'math_proficiency_pct': 'Math Proficiency',
      'reading_proficiency_pct': 'Reading Proficiency',
      'college_readiness_index': 'College Readiness Index'
    };
    return labels[metric] || metric;
  };

  // Mock PDF generation - in production, use jsPDF with html2canvas
  const generateReport = async () => {
    setIsGenerating(true);
    
    // Simulate PDF generation time
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Create downloadable content
    const reportContent = schools.map(school => `
HIGHSCHOOLTRENDS.ORG - SNAPSHOT REPORT
======================================

School: ${school.name}
Location: ${school.location}
Report Date: ${new Date().toLocaleDateString()}

SUMMARY
-------
${generateSummary(school)}

KEY METRICS (2025)
------------------
National Rank: #${school.metrics['2025']?.national_rank || 'N/A'}
Overall Score: ${school.metrics['2025']?.overall_score || 'N/A'}
Enrollment: ${school.metrics['2025']?.enrollment?.toLocaleString() || 'N/A'}
Graduation Rate: ${school.metrics['2025']?.graduation_rate_pct || 'N/A'}%
AP Pass Rate: ${school.metrics['2025']?.ap_pass_pct || 'N/A'}%
Math Proficiency: ${school.metrics['2025']?.math_proficiency_pct || 'N/A'}%
Reading Proficiency: ${school.metrics['2025']?.reading_proficiency_pct || 'N/A'}%

TREND ANALYSIS
--------------
Selected Metric: ${getMetricLabel(selectedMetric)}
2019 Value: ${school.metrics['2019']?.[selectedMetric] || 'N/A'}
2025 Value: ${school.metrics['2025']?.[selectedMetric] || 'N/A'}

Generated by HighSchoolTrends.org
Educational data for informational purposes only.
    `).join('\n\n' + '='.repeat(50) + '\n\n');
    
    // Create and download file
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `school-trends-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    setIsGenerating(false);
  };

  if (schools.length === 0) {
    return null;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Snapshot Report
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-sm text-muted-foreground">
          Generate a comprehensive PDF report summarizing trends and key metrics for selected schools.
        </p>
        
        <div className="space-y-3">
          <div>
            <span className="text-sm font-medium">Selected Schools:</span>
            <div className="flex flex-wrap gap-2 mt-1">
              {schools.map((school, index) => (
                <Badge key={school.name} variant="secondary">
                  {school.name}
                </Badge>
              ))}
            </div>
          </div>
          
          <div>
            <span className="text-sm font-medium">Focus Metric:</span>
            <Badge variant="outline" className="ml-2">
              {getMetricLabel(selectedMetric)}
            </Badge>
          </div>
        </div>
        
        <div className="pt-2">
          <Button 
            onClick={generateReport} 
            disabled={isGenerating}
            className="w-full"
          >
            {isGenerating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Report...
              </>
            ) : (
              <>
                <Download className="mr-2 h-4 w-4" />
                Download Snapshot Report
              </>
            )}
          </Button>
        </div>
        
        <p className="text-xs text-muted-foreground">
          Reports include 7-year trend analysis, key metrics, and AI-generated summaries.
        </p>
      </CardContent>
    </Card>
  );
}